"""
Django settings for LookProjeto project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '6@g$791o07ea06*x8i62ydyfoj58aroav0j1g-rmcsg299c-c^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #libs
    'widget_tweaks',
    'paypal.standard.ipn',
    #apps
    'core',
    'accounts',
    'catalog',
    'checkout',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    #'whitenoise.middleware.WhiteNoiseMiddleware', #WhiteNoise permite que seu aplicativo da Web sirva seus próprios arquivos estáticos, tornando-o uma unidade independente que pode ser implantada em qualquer lugar sem depender de qualquer outro serviço externo. (Especialmente útil no Heroku)
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'checkout.middleware.cart_item_middleware',
]

ROOT_URLCONF = 'LookProjeto.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth', #contexo que adiciona o user em todos templates
                'django.contrib.messages.context_processors.messages',
                #abaixo é o contexto criado em catalog/context_processors.py
                'catalog.context_processors.categories',
            ],
        },
    },
]

WSGI_APPLICATION = 'LookProjeto.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    }, #AUTH_PASSWORD_VALIDATORS é basicamente um validador de senhas do proprio django
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Bahia'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

# E-mail
EMAIL_HOST = '' #onde fica o linkdo email se smtp
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
DEFAULT_FROM_EMAIL = 'admin@djangoecommerce.com'

# auth
LOGIN_URL = 'login' #nome da URL
LOGIN_REDIRECT_URL = 'index' 
LOGOUT_URL = 'logout'
AUTH_USER_MODEL = 'accounts.User' 
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'accounts.backends.ModelBackend',
) #carrega quais backends voce irá usar

# Messages
from django.contrib.messages import constants as messages_constants 
MESSAGE_TAGS = {
    messages_constants.DEBUG: 'debug',
    messages_constants.INFO: 'info',
    messages_constants.SUCCESS: 'success',
    messages_constants.WARNING: 'warning',
    messages_constants.ERROR: 'danger',
} #Massage_tags é um dicionario com essas constantes, quando da erro la ele vai pro comportamento de ERROR e assim vai.

PAGSEGURO_TOKEN = '70095D211D944F568333595CE82BD27D' #TOKEN para acessar a api 
PAGSEGURO_EMAIL = 'jeffreydanff14@gmail.com'
PAGSEGURO_SANDBOX = True #True é para teste, False para uso real, variavel criada na views

PAYPAL_TEST = True #se for igual a true ele considera que voce esta em um abiante de sandbox(teste)
PAYPAL_EMAIL = 'sb-cvk8e1942040@personal.example.com'

try:
    from .local_settings import *
except ImportError:
    pass #dessa forma o local_settings sobreve escreve configurações, Repare que aqui neste arquivo
         # na linha 26  o DEBUG = False e no arquivo de local_settings esta DEUBUG= True
         # meio que ele substitui sua configurações para "produção" 

